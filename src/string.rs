use std::char;

pub trait CP437Char {
    fn from_cp437_byte(byte: u8) -> char;
    fn as_cp437_byte(&self) -> Option<u8>;
}

pub trait CP437String {
    fn from_cp437_bytes(bytes: &[u8]) -> String;
    fn as_cp437_bytes(&self) -> Vec<u8>;
}

impl CP437Char for char {
    fn from_cp437_byte(byte: u8) -> char {
        match byte {
            1 => '\u{263A}',
            2 => '\u{263B}',
            3 => '\u{2665}',
            4 => '\u{2666}',
            5 => '\u{2663}',
            6 => '\u{2660}',
            7 => '\u{2022}',
            8 => '\u{25D8}',
            9 => '\u{25CB}',
            10 => '\u{25D9}',
            11 => '\u{2642}',
            12 => '\u{2640}',
            13 => '\u{266A}',
            14 => '\u{266B}',
            15 => '\u{263C}',
            16 => '\u{25BA}',
            17 => '\u{25C4}',
            18 => '\u{2195}',
            19 => '\u{203C}',
            20 => '\u{00B6}',
            21 => '\u{00A7}',
            22 => '\u{25AC}',
            23 => '\u{21A8}',
            24 => '\u{2191}',
            25 => '\u{2193}',
            26 => '\u{2192}',
            27 => '\u{2190}',
            28 => '\u{221F}',
            29 => '\u{2194}',
            30 => '\u{25B2}',
            31 => '\u{25BC}',
            127 => '\u{2302}',
            128 => '\u{00C7}',
            129 => '\u{00FC}',
            130 => '\u{00E9}',
            131 => '\u{00E2}',
            132 => '\u{00E4}',
            133 => '\u{00E0}',
            134 => '\u{00E5}',
            135 => '\u{00E7}',
            136 => '\u{00EA}',
            137 => '\u{00EB}',
            138 => '\u{00E8}',
            139 => '\u{00EF}',
            140 => '\u{00EE}',
            141 => '\u{00EC}',
            142 => '\u{00C4}',
            143 => '\u{00C5}',
            144 => '\u{00C9}',
            145 => '\u{00E6}',
            146 => '\u{00C6}',
            147 => '\u{00F4}',
            148 => '\u{00F6}',
            149 => '\u{00F2}',
            150 => '\u{00FB}',
            151 => '\u{00F9}',
            152 => '\u{00FF}',
            153 => '\u{00D6}',
            154 => '\u{00DC}',
            155 => '\u{00A2}',
            156 => '\u{00A3}',
            157 => '\u{00A5}',
            158 => '\u{20A7}',
            159 => '\u{0192}',
            160 => '\u{00E1}',
            161 => '\u{00ED}',
            162 => '\u{00F3}',
            163 => '\u{00FA}',
            164 => '\u{00F1}',
            165 => '\u{00D1}',
            166 => '\u{00AA}',
            167 => '\u{00BA}',
            168 => '\u{00BF}',
            169 => '\u{2310}',
            170 => '\u{00AC}',
            171 => '\u{00BD}',
            172 => '\u{00BC}',
            173 => '\u{00A1}',
            174 => '\u{00AB}',
            175 => '\u{00BB}',
            176 => '\u{2591}',
            177 => '\u{2592}',
            178 => '\u{2593}',
            179 => '\u{2502}',
            180 => '\u{2524}',
            181 => '\u{2561}',
            182 => '\u{2562}',
            183 => '\u{2556}',
            184 => '\u{2555}',
            185 => '\u{2563}',
            186 => '\u{2551}',
            187 => '\u{2557}',
            188 => '\u{255D}',
            189 => '\u{255C}',
            190 => '\u{255B}',
            191 => '\u{2510}',
            192 => '\u{2514}',
            193 => '\u{2534}',
            194 => '\u{252C}',
            195 => '\u{251C}',
            196 => '\u{2500}',
            197 => '\u{253C}',
            198 => '\u{255E}',
            199 => '\u{255F}',
            200 => '\u{255A}',
            201 => '\u{2554}',
            202 => '\u{2569}',
            203 => '\u{2566}',
            204 => '\u{2560}',
            205 => '\u{2550}',
            206 => '\u{256C}',
            207 => '\u{2567}',
            208 => '\u{2568}',
            209 => '\u{2564}',
            210 => '\u{2565}',
            211 => '\u{2559}',
            212 => '\u{2558}',
            213 => '\u{2552}',
            214 => '\u{2553}',
            215 => '\u{256B}',
            216 => '\u{256A}',
            217 => '\u{2518}',
            218 => '\u{250C}',
            219 => '\u{2588}',
            220 => '\u{2584}',
            221 => '\u{258C}',
            222 => '\u{2590}',
            223 => '\u{2580}',
            224 => '\u{03B1}',
            225 => '\u{00DF}',
            226 => '\u{0393}',
            227 => '\u{03C0}',
            228 => '\u{03A3}',
            229 => '\u{03C3}',
            230 => '\u{00B5}',
            231 => '\u{03C4}',
            232 => '\u{03A6}',
            233 => '\u{0398}',
            234 => '\u{03A9}',
            235 => '\u{03B4}',
            236 => '\u{221E}',
            237 => '\u{03C6}',
            238 => '\u{03B5}',
            239 => '\u{2229}',
            240 => '\u{2261}',
            241 => '\u{00B1}',
            242 => '\u{2265}',
            243 => '\u{2264}',
            244 => '\u{2320}',
            245 => '\u{2321}',
            246 => '\u{00F7}',
            247 => '\u{2248}',
            248 => '\u{00B0}',
            249 => '\u{2219}',
            250 => '\u{00B7}',
            251 => '\u{221A}',
            252 => '\u{207F}',
            253 => '\u{00B2}',
            254 => '\u{25A0}',
            0 | 255 => '\u{0020}',
            _ => char::from_u32(byte as u32).expect("Convert CP437 to unicode char"),
        }
    }

    fn as_cp437_byte(&self) -> Option<u8> {
        let unicode = *self as u32;
        match *self as u32 {
            0x263A => Some(1),
            0x263B => Some(2),
            0x2665 => Some(3),
            0x2666 => Some(4),
            0x2663 => Some(5),
            0x2660 => Some(6),
            0x2022 => Some(7),
            0x25D8 => Some(8),
            0x25CB => Some(9),
            0x25D9 => Some(10),
            0x2642 => Some(11),
            0x2640 => Some(12),
            0x266A => Some(13),
            0x266B => Some(14),
            0x263C => Some(15),
            0x25BA => Some(16),
            0x25C4 => Some(17),
            0x2195 => Some(18),
            0x203C => Some(19),
            0x00B6 => Some(20),
            0x00A7 => Some(21),
            0x25AC => Some(22),
            0x21A8 => Some(23),
            0x2191 => Some(24),
            0x2193 => Some(25),
            0x2192 => Some(26),
            0x2190 => Some(27),
            0x221F => Some(28),
            0x2194 => Some(29),
            0x25B2 => Some(30),
            0x25BC => Some(31),
            0x2302 => Some(127),
            0x00C7 => Some(128),
            0x00FC => Some(129),
            0x00E9 => Some(130),
            0x00E2 => Some(131),
            0x00E4 => Some(132),
            0x00E0 => Some(133),
            0x00E5 => Some(134),
            0x00E7 => Some(135),
            0x00EA => Some(136),
            0x00EB => Some(137),
            0x00E8 => Some(138),
            0x00EF => Some(139),
            0x00EE => Some(140),
            0x00EC => Some(141),
            0x00C4 => Some(142),
            0x00C5 => Some(143),
            0x00C9 => Some(144),
            0x00E6 => Some(145),
            0x00C6 => Some(146),
            0x00F4 => Some(147),
            0x00F6 => Some(148),
            0x00F2 => Some(149),
            0x00FB => Some(150),
            0x00F9 => Some(151),
            0x00FF => Some(152),
            0x00D6 => Some(153),
            0x00DC => Some(154),
            0x00A2 => Some(155),
            0x00A3 => Some(156),
            0x00A5 => Some(157),
            0x20A7 => Some(158),
            0x0192 => Some(159),
            0x00E1 => Some(160),
            0x00ED => Some(161),
            0x00F3 => Some(162),
            0x00FA => Some(163),
            0x00F1 => Some(164),
            0x00D1 => Some(165),
            0x00AA => Some(166),
            0x00BA => Some(167),
            0x00BF => Some(168),
            0x2310 => Some(169),
            0x00AC => Some(170),
            0x00BD => Some(171),
            0x00BC => Some(172),
            0x00A1 => Some(173),
            0x00AB => Some(174),
            0x00BB => Some(175),
            0x2591 => Some(176),
            0x2592 => Some(177),
            0x2593 => Some(178),
            0x2502 => Some(179),
            0x2524 => Some(180),
            0x2561 => Some(181),
            0x2562 => Some(182),
            0x2556 => Some(183),
            0x2555 => Some(184),
            0x2563 => Some(185),
            0x2551 => Some(186),
            0x2557 => Some(187),
            0x255D => Some(188),
            0x255C => Some(189),
            0x255B => Some(190),
            0x2510 => Some(191),
            0x2514 => Some(192),
            0x2534 => Some(193),
            0x252C => Some(194),
            0x251C => Some(195),
            0x2500 => Some(196),
            0x253C => Some(197),
            0x255E => Some(198),
            0x255F => Some(199),
            0x255A => Some(200),
            0x2554 => Some(201),
            0x2569 => Some(202),
            0x2566 => Some(203),
            0x2560 => Some(204),
            0x2550 => Some(205),
            0x256C => Some(206),
            0x2567 => Some(207),
            0x2568 => Some(208),
            0x2564 => Some(209),
            0x2565 => Some(210),
            0x2559 => Some(211),
            0x2558 => Some(212),
            0x2552 => Some(213),
            0x2553 => Some(214),
            0x256B => Some(215),
            0x256A => Some(216),
            0x2518 => Some(217),
            0x250C => Some(218),
            0x2588 => Some(219),
            0x2584 => Some(220),
            0x258C => Some(221),
            0x2590 => Some(222),
            0x2580 => Some(223),
            0x03B1 => Some(224),
            0x00DF => Some(225),
            0x0393 => Some(226),
            0x03C0 => Some(227),
            0x03A3 => Some(228),
            0x03C3 => Some(229),
            0x00B5 => Some(230),
            0x03C4 => Some(231),
            0x03A6 => Some(232),
            0x0398 => Some(233),
            0x03A9 => Some(234),
            0x03B4 => Some(235),
            0x221E => Some(236),
            0x03C6 => Some(237),
            0x03B5 => Some(238),
            0x2229 => Some(239),
            0x2261 => Some(240),
            0x00B1 => Some(241),
            0x2265 => Some(242),
            0x2264 => Some(243),
            0x2320 => Some(244),
            0x2321 => Some(245),
            0x00F7 => Some(246),
            0x2248 => Some(247),
            0x00B0 => Some(248),
            0x2219 => Some(249),
            0x00B7 => Some(250),
            0x221A => Some(251),
            0x207F => Some(252),
            0x00B2 => Some(253),
            0x25A0 => Some(254),
            _ if unicode < 128 => Some(unicode as u8),
            _ => None,
        }
    }
}

impl CP437String for String {
    fn as_cp437_bytes(&self) -> Vec<u8> {
        let mut bytes = Vec::new();
        for c in self.chars() {
            if let Some(value) = c.as_cp437_byte() {
                bytes.push(value);
            }
        }
        bytes
    }

    fn from_cp437_bytes(bytes: &[u8]) -> String {
        let mut string = String::new();
        for byte in bytes {
            let c = char::from_cp437_byte(*byte);
            string.push(c);
        }
        string
    }
}
